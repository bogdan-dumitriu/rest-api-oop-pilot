package eu.europa.ec.isa2.restapi.profile.model;
import eu.europa.ec.isa2.restapi.profile.constants.JSONConstants;
import eu.europa.ec.isa2.restapi.profile.enums.APIProblemType;
import io.swagger.v3.oas.annotations.media.Schema;


@Schema(
        name = "Problem",
        title = "A Problem Details object (RFC 7807) defined by the ISA² IPS REST API Core Profile",
        description = "A Problem Details object (RFC 7807) with ISA² IPS REST API extensions, used for signals (responses) to messages",
        id = "https://joinup.ec.europa.eu/collection/api4dt/solution/.../messaging.schema.json",
        schema = JSONConstants.SCHEMA_V202012,
        requiredProperties = {"title","type","status"}

)
public class APIProblem {
    @Schema(name = "title",
            description = "A short summary of the problem type, written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).",
            example = "Service Unavailable")
    String title;
    @Schema(name = "type",
            format = "uri",
            defaultValue = "about:blank",
            description = "An URI reference that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g. using HTML)")
    String type;
    @Schema(name = "status",
            format = "int32",
            minimum = "200",
            maximum = "600",
            exclusiveMaximum = true,
            example = "503",
            description = "The HTTP status code generated by the origin server for this occurrence of the problem.")
    Integer status;
    @Schema(name = "detail",
            format = "string",
            description = "A human-readable explanation specific to this occurrence of the problem")
    String detail;
    @Schema(name = "instance",
            format = "uri-reference",
            description = "A URI reference that identifies the specific occurrence of the problem. It may or may not yieldfurther information if dereferenced.")
    String instance;

    public APIProblem() {
    }

    public APIProblem(APIProblemType problemType) {
        this.title = problemType.getTitle();
        this.type = problemType.getType();
        this.status = problemType.getStatus();
        this.detail = problemType.getDetail();
        this.instance = problemType.getInstance();
    }

    public APIProblem(APIProblemType problemType, String details, String instance) {
        this.title = problemType.getTitle();
        this.type = problemType.getType();
        this.status = problemType.getStatus();
        this.detail = details;
        this.instance = instance;
    }

    public APIProblem(String title, Integer status, String type, String detail, String instance) {
        this.title = title;
        this.type = type;
        this.status = status;
        this.detail = detail;
        this.instance = instance;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getDetail() {
        return detail;
    }

    public void setDetail(String detail) {
        this.detail = detail;
    }

    public String getInstance() {
        return instance;
    }

    public void setInstance(String instance) {
        this.instance = instance;
    }
}
