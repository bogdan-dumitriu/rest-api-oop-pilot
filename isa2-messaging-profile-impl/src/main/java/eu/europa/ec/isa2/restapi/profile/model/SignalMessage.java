package eu.europa.ec.isa2.restapi.profile.model;

import eu.europa.ec.isa2.restapi.profile.enums.APIProblemType;
import io.swagger.v3.oas.annotations.media.Schema;
import static eu.europa.ec.isa2.restapi.profile.model.schemas.SchemaDescriptionConstants.*;


@Schema(
        name = SIGNAL_NAME,
        title = SIGNAL_TITLE,
        description = SIGNAL_DESCRIPTION,
        id = SIGNAL_ID,
        schema = SIGNAL_SCHEMA,
        requiredProperties = {SIGNAL_REQ_PROP_TITLE, SIGNAL_REQ_PROP_TYPE, SIGNAL_REQ_PROP_STATUS, SIGNAL_REQ_PROP_INSTANCE}
)
public class SignalMessage {

    @Schema(name = "title",
            description = "A short summary of the problem type, written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).",
            example = "Message Accepted")
    String title;
    @Schema(name = "type",
            format = "uri",
            defaultValue = "about:blank",
            description = "An URI reference that identifies the problem type. When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g. using HTML).",
            example = "https://github.com/isa2-api4ips/rest-api-profile/blob/main/messaging-api-specification/signal.md#message-accepted")
    String type;
    @Schema(name = "status",
            format = "int32",
            minimum = "200",
            maximum = "600",
            exclusiveMaximum = true,
            example = "202",
            description = "The HTTP status code generated by the origin server for this occurrence of the problem.")
    Integer status;
    @Schema(name = "detail",
            format = "string",
            description = "A human-readable explanation specific to this occurrence of the problem.")
    String detail;
    @Schema(name = "instance",
            format = "uri-reference",
            description = "A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.")
    String instance;
    @Schema(name="digest",
            format = "string",
            description = "The digest of the received message using the notation proposed in 'Digest Header' (https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-digest-headers).",
            example = "sha-256=4REjxQ4yrqUVicfSKYNO/cF9zNj5ANbzgDZt3/h3Qxo="
     )
    String digest;

    public SignalMessage() {
    }

    public SignalMessage(String title, Integer status, String type, String detail, String instance, String digest) {
        this.title = title;
        this.type = type;
        this.status = status;
        this.detail = detail;
        this.instance = instance;
        this.digest = digest;
    }

    public SignalMessage(APIProblemType respondType,  String instance, String digest) {
        this.title = respondType.getTitle();
        this.type = respondType.getType();
        this.status = respondType.getStatus();
        this.detail = respondType.getDetail();
        this.instance = instance;
        this.digest = digest;
    }

    public String getDigest() {
        return digest;
    }

    public void setDigest(String digest) {
        this.digest = digest;
    }



    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getDetail() {
        return detail;
    }

    public void setDetail(String detail) {
        this.detail = detail;
    }

    public String getInstance() {
        return instance;
    }

    public void setInstance(String instance) {
        this.instance = instance;
    }
}
